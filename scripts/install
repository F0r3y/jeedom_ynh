#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
sudo=$YNH_APP_ARG_SUDO

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app final_path $final_path
ynh_app_setting_set $app sudo $sudo

#=================================================
# INSTALL DEPENDENCIES
#=================================================

#ynh_install_app_dependencies ntp usb-modeswitch python-serial

#=================================================
# CREATE A MYSQL DATABASE
#=================================================

db_name=$(ynh_sanitize_dbid $app)
ynh_app_setting_set $app db_name $db_name
ynh_mysql_setup_db $db_name $db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

# For nginx user to be able to communicate with home automation devices
	if [ $(getent group dialout) ]; then
		sudo usermod -a -G dialout $app
	fi
	if [ $(getent group gpio) ]; then
		sudo usermod -a -G gpio $app
	fi
	if [ $(getent group tty) ]; then
		sudo usermod -a -G tty $app
	fi

# Sudo permissions to the user if agreed to
	if [ $sudo ]; then
		sudo usermod -a -G sudo $app
		if [ $(sudo grep "$app ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | wc -l) -eq 0 ];then
			sudo bash -c 'echo "'${app}' ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo)'
		fi
	fi

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC SETUP
#=================================================

# Configure Jeedom database and initialize app
ynh_replace_string "#DBNAME#" "$db_name" ../conf/common.config.php
ynh_replace_string "#USERNAME#" "$db_name" ../conf/common.config.php
ynh_replace_string "#PASSWORD#" "$db_pwd" ../conf/common.config.php
sudo cp ../conf/common.config.php $final_path/core/config/common.config.php

# Install Jeedom	
sudo php $final_path/install/install.php mode=force

# Configure LDAP and the Admin User and access settings
ynh_replace_string "__ADMIN__" "$admin" ../conf/config.sql
mysql -u $db_name -p$db_pwd $db_name < ../conf/config.sql

# Cron
echo "* * * * * $app /usr/bin/php -f $final_path/core/php/jeeCron.php" > cronjeedom
sudo mv cronjeedom /etc/cron.d/${app}
sudo chown root /etc/cron.d/${app}

echo "* * * * * $app /usr/bin/php -f $final_path/core/php/watchdog.php" > cronjeedom_watchdog
sudo mv cronjeedom_watchdog /etc/cron.d/${app}_watchdog
sudo chown root /etc/cron.d/${app}_watchdog

# Check
#sudo php $final_path/install/sick.php

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R $app: $final_path
chmod 775 -R $final_path

# Create tmp required by Jeedom
mkdir -p /tmp/jeedom
chmod 777 -R /tmp/jeedom

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# SETUP SSOWAT
#=================================================

# Remove the public access
ynh_app_setting_delete $app skipped_uris


# Access to API without SSO
ynh_app_setting_set "$app" unprotected_uris "/core/api/jeeApi.php"

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
